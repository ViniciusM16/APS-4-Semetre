#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define TAM 10000

/* run this program using the console pauser or add your own getch, system("pause") or input loop */

void bubbleSort (long int vetBubble[], long int n){
	int i,j, aux;
	
	for (i=0; i<n; i++){
		for (j=0; j<n-1-i; j++){
			if(vetBubble[j]>vetBubble[j+1]){
				aux=vetBubble[j];
				vetBubble[j]=vetBubble[j+1];
				vetBubble[j+1]=aux;	
				
			}			
		}		
	}	
}

void selectionSort (long int vetSelect[], long int n){
	int i, j, menor, troca;
	for (i = 0; i < n-1; i++) {
		menor = i;
		for (j = i+1; j < n; j++){
			if(vetSelect[j] < vetSelect[menor])
				menor = j;
		}
		
		if(i !=menor){
			troca = vetSelect[i];
			vetSelect[i] = vetSelect[menor];
			vetSelect[menor] = troca;
		}
	}
}

void insertionSort(long int vetInsert[], long int n){
    int i, aux, j;
    for (i = 1; i < n; i++) {
        aux = vetInsert[i];
        j = i - 1;

        while (j >= 0 && vetInsert[j] > aux) {
            vetInsert[j + 1] = vetInsert[j];
            j = j - 1;
        }
        vetInsert[j + 1] = aux;
    }
}

void criaHeap (long int vetHeap[], long int i, long int f){
	int aux = vetHeap[i];
	int j = i*2+1;
	while (j<=f) {
		if(j<f){
			if(vetHeap[j] < vetHeap[j+1]) {
				j=j+1;
			}
		}
		if (aux < vetHeap[j]){
			vetHeap[i] = vetHeap[j];
			i=j;
			j= 2*i+1;
		} else {
			j=f+1;
		}
	}
	vetHeap[i] = aux;
}

void heapsort (long int vetHeap[], long int n){
	int i, aux;
	for(i=(n-1)/2; i>=0; i--){
		criaHeap(vetHeap, i, n-1);
	}
	
	for (i=n-1; i>=1; i--){
		aux=vetHeap[0];
		vetHeap[0] = vetHeap[i];
		vetHeap[i] = aux;
		criaHeap(vetHeap, 0, i-1);
	}
}

struct balde {
	int qtd;
	int valores[TAM];
};

void bucketsort (long int vetBucket[], long int n){
	int i, j, maior, menor, nroBaldes, pos;
	struct balde *bd;
	maior = menor = vetBucket[0];
	for (i=1; i<n; i++){
		if(vetBucket[i] > maior) maior = vetBucket[i];
		if(vetBucket[i] < menor) menor = vetBucket[i];		
	}
	nroBaldes = (maior - menor) / TAM +1;
	bd = (struct balde *) malloc(nroBaldes*sizeof(struct balde));
	for (i = 0; i< nroBaldes; i++)
		bd[i].qtd = 0;
	for (i = 0; i<n; i++){
		pos= (vetBucket[i] - menor)/TAM;
		bd[pos].valores[bd[pos].qtd] = vetBucket[i];
		bd[pos].qtd++;
	}
	pos = 0;
	for (i=0; i<nroBaldes; i++){
		insertionSort(bd[i].valores, bd[i].qtd);
		for(j=0; j<bd[i].qtd;j++){
			vetBucket[pos] = bd[i].valores[j];
			pos++;
		}
	}
	free(bd);
}

int binarySearch(long int vetBin[],long int item, long int low, long int high){
    if (high <= low)
        return (item > vetBin[low]) ?
                (low + 1) : low;
 
    int mid = (low + high) / 2;
 
    if (item == vetBin[mid])
        return mid + 1;
 
    if (item > vetBin[mid])
        return binarySearch(vetBin, item,
                            mid + 1, high);
    return binarySearch(vetBin, item, low,
                        mid - 1);
}
 
void binaryinsertionSort(long int vetBin[], long int n){
    int i, loc, j, k, selected;
 
    for (i = 1; i < n; ++i){
        j = i - 1;
        selected = vetBin[i];
 
        loc = binarySearch(vetBin, selected, 0, j);
 
        while (j >= loc){
            vetBin[j + 1] = vetBin[j];
            j--;
        }
        vetBin[j + 1] = selected;
    }
}

void mergesort (long int *vetMer, long int inicio, long int fim){
	int meio;
	if(inicio<fim){
		meio = floor((inicio+fim)/2);
		mergesort(vetMer, inicio, meio);
		mergesort(vetMer, meio+1, fim);
		merge(vetMer, inicio, meio, fim);
	}
}

void merge(long int *vetMer, long int inicio, long int meio, long int fim){
	int *temp, p1, p2, tamanho, i, j, k;
	int fim1 = 0, fim2 = 0;
	tamanho = fim-inicio+1;
	p1= inicio;
	p2=meio+1; 
	temp = (int *) malloc(tamanho*sizeof(int));
	if(temp != NULL){
		for(i=0; i<tamanho; i++){
			if(!fim1 && !fim2){
				if(vetMer[p1] < vetMer[p2])
					temp[i]=vetMer[p1++];
				else
					temp[i] = vetMer[p2++];
					
				if(p1>meio) fim1=1;
				if(p2>fim) fim2=1;	
			} else {
				if(!fim1)
					temp[i]=vetMer[p1++];
				else
					temp[i]=vetMer[p2++];	
			}
		}
		for (j=0, k=inicio; j<tamanho; j++, k++)
			vetMer[k]=temp[j];
	}	
		free(temp);
}

void Quick(long int vetQuick[], long int inicio, long int fim);

void Quick(long int vetQuick[], long int inicio, long int fim){
   
   int pivo, aux, i, j, meio;
   i = inicio;
   j = fim;
   
   meio = (int) ((i + j) / 2);
   pivo = vetQuick[meio];
   
   do{
      while (vetQuick[i] < pivo) i = i + 1;
      while (vetQuick[j] > pivo) j = j - 1;
      
      if(i <= j){
         aux = vetQuick[i];
         vetQuick[i] = vetQuick[j];
         vetQuick[j] = aux;
         i = i + 1;
         j = j - 1;
      }
   }while(j > i);
   
   if(inicio < j) Quick(vetQuick, inicio, j);
   if(i < fim) Quick(vetQuick, i, fim);   

}

int main(void) {
	
	long int i, n=15000, vetBubble[n], vetSelect[n], vetInsert[n], vetHeap[n], vetBucket[n], vetBin[n], vetMer[n], vetQuick[n];
	clock_t c2, c1;
	float tempo;	
	
	for (i = 0; i<n; i++){
		vetBubble[i] = rand()%n;
		vetSelect[i] = rand()%n;
		vetInsert[i] = rand()%n;
		vetHeap[i] = rand()%n;
		vetBucket[i] = rand()%n;
		vetBin[i] = rand()%n;
		vetQuick[i] = rand()%n;
	}
	
	/* Pritar na tela as listas
	
	c1 = clock();
	printf("=== LISTA COM ORDEM ALEATÓRIA ===\n\n");		
	for (i=0; i<n; i++) 
		printf("vet[%d]=%d \n", i, vetBin[i]);
	
	//bubbleSort(vetBubble, n);
	//selectionSort(vetSelect, n);
	//insertionSort(vetInsert, n);
	//heapsort(vetHeap, n);
	//bucketsort(vetBucket, n);
	//binaryinsertionSort(vetBin, n);
	//mergesort(vetMer, 0, n-1);
	//Quick(vetQuick, 0, n-1);	
		
	printf("\n\n");
	printf("=== LISTA ORDENADA ===\n\n");	
	for (i=0; i<n; i++) 
		printf("vet[%d]=%d \n", i, vetBin[i]);
	
	c2 = clock();
	tempo = (c2 - c1)*1000/CLOCKS_PER_SEC;		
	printf("Tempo de execução: %f\n", tempo);
	*/
	
	c1 = clock();
	bubbleSort(vetBubble, n);
	c2 = clock();
	tempo = (c2 - c1)*1000/CLOCKS_PER_SEC;		
	printf("Tempo BubbleSort: %f\n", tempo);
	printf("\n\n");
	
	c1 = clock();
	selectionSort(vetSelect, n);
	c2 = clock();
	tempo = (c2 - c1)*1000/CLOCKS_PER_SEC;		
	printf("Tempo SelectionSort: %f\n", tempo);
	printf("\n\n");

	c1 = clock();
	insertionSort(vetInsert, n);
	c2 = clock();
	tempo = (c2 - c1)*1000/CLOCKS_PER_SEC;		
	printf("Tempo InsertionSort: %f\n", tempo);
	printf("\n\n");
	
	c1 = clock();
	heapsort(vetHeap, n);
	c2 = clock();
	tempo = (c2 - c1)*1000/CLOCKS_PER_SEC;		
	printf("Tempo HeapSort: %f\n", tempo);
	printf("\n\n");
	
	c1 = clock();
	bucketsort(vetBucket, n);
	c2 = clock();
	tempo = (c2 - c1)*1000/CLOCKS_PER_SEC;		
	printf("Tempo BucketSort: %f\n", tempo);
	printf("\n\n");
	
	c1 = clock();
	binaryinsertionSort(vetBin, n);
	c2 = clock();
	tempo = (c2 - c1)*1000/CLOCKS_PER_SEC;		
	printf("Tempo BinarySort: %f\n", tempo);
	printf("\n\n");
	
	c1 = clock();
	mergesort(vetMer, 0, n-1);
	c2 = clock();
	tempo = (c2 - c1)*1000/CLOCKS_PER_SEC;		
	printf("Tempo MergeSort: %f\n", tempo);
	printf("\n\n");
	
	c1 = clock();
	Quick(vetQuick, 0, n-1);
	c2 = clock();
	tempo = (c2 - c1)*1000/CLOCKS_PER_SEC;		
	printf("Tempo QuickSort: %f\n", tempo);
	printf("\n\n");
		
}

